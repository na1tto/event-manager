definitions:
  database.Event:
    properties:
      date:
        type: string
      description:
        maxLength: 150
        minLength: 10
        type: string
      id:
        type: integer
      location:
        minLength: 3
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      ownerId:
        type: integer
    required:
    - date
    - description
    - location
    - name
    type: object
  database.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  main.loginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  main.loginResponse:
    properties:
      token:
        type: string
    type: object
  main.registerRequest:
    properties:
      email:
        type: string
      name:
        minLength: 2
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
info:
  contact: {}
  description: A rest API in Go using Gin framework
  title: Go Gin Rest API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Logs a user in the application providing a bearer token through
        the JWT Login Method
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/main.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.loginResponse'
        "400":
          description: Invalid requisition payload
          schema:
            type: string
        "401":
          description: Invalid email or password
          schema:
            type: string
        "500":
          description: Something went wrong
          schema:
            type: string
      summary: Logs a user in the application providing a bearer token
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Registers a user in the database
      parameters:
      - description: Register credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/main.registerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.User'
        "400":
          description: Invalid requisition payload
          schema:
            type: string
        "500":
          description: Something went wrong
          schema:
            type: string
      summary: Registers a user in the database
      tags:
      - Auth
  /api/v1/events:
    get:
      consumes:
      - application/json
      description: Returns all events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Event'
            type: array
      summary: Returns all events
      tags:
      - Events
    post:
      consumes:
      - application/json
      description: Creates a event in the database using a bearer token
      parameters:
      - description: Event informations
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/database.Event'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Event'
      security:
      - BearerAuth: []
      summary: Creates a event
      tags:
      - Events
  /api/v1/events/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a event from the database using a bearer token
      parameters:
      - description: event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: 'Error: Invalid event ID'
          schema:
            type: string
        "403":
          description: 'Error: You are not authorized to delete this event'
          schema:
            type: string
        "404":
          description: 'Error: Event not found'
          schema:
            type: string
        "500":
          description: 'Error: Failed to retrieve event'
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Deletes a event from the database
      tags:
      - Events
    get:
      consumes:
      - application/json
      description: Returns a single event
      parameters:
      - description: event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Returns a single event
      tags:
      - Events
    put:
      consumes:
      - application/json
      description: Updates a event in the database using a bearer token
      parameters:
      - description: event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated event informations
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/database.Event'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Event'
        "400":
          description: 'Error: Invalid event ID'
          schema:
            type: string
        "403":
          description: 'Error: You are not authorized to update this event'
          schema:
            type: string
        "404":
          description: 'Error: Event not found'
          schema:
            type: string
        "500":
          description: 'Error: Failed to retrieve event'
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Updates a event
      tags:
      - Events
  /api/v1/events/{id}/attendees/{userId}:
    post:
      consumes:
      - application/json
      description: Adds a attendee to a event in the database (needs authetication)
      parameters:
      - description: event ID
        in: path
        name: id
        required: true
        type: integer
      - description: attendee to be added
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: 'Error: Invalid event ID'
          schema:
            type: string
        "403":
          description: 'Error: You are not authorized to delete this event'
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: Error
        "409":
          description: 'Error: Attendee already exists'
          schema:
            type: string
        "500":
          description: 'Error: Failed to retrieve event'
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Adds a attendee to a event in the databse
      tags:
      - Events
securityDefinitions:
  BearerAuth:
    description: Enter your bearer token in the format ++Bearer &lt;token&gt;**
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
